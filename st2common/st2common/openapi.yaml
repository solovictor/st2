swagger: '2.0'

info:
  version: "1.0.0"
  title: StackStorm API

paths:
  /api/v1/:
    get:
      operationId: st2api.controllers.root:root_controller.index
      description: General API info.
      responses:
        '200':
          description: General API info.
          schema:
            type: object
            properties:
              version:
                type: string
              docs_url:
                type: string
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actions:
    get:
      operationId: st2api.controllers.v1.actions:actions_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.ACTION_LIST }}
      description: Returns a list of all actions.
      parameters:
        - name: exclude_attributes
          in: query
          description: List of attributes to exclude
          type: array
          items:
            type: string
          required: false
        - name: limit
          in: query
          description: Number of actions to get
          type: integer
        - name: id
          in: query
          description: Action id filter
          type: array
          items:
            type: string
        - name: name
          in: query
          description: Action name filter
          type: string
        - name: pack
          in: query
          description: Action pack name filter
          type: string
      responses:
        '200':
          description: List of actions
          schema:
            type: array
            items:
              $ref: '#/definitions/Action'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.actions:actions_controller.post
      description: |
        Create a new action.
      parameters:
        - name: action
          in: body
          description: Action content
          schema:
            $ref: '#/definitions/ActionCreateRequest'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Single action being created
          schema:
            $ref: '#/definitions/Action'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actions/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.actions:actions_controller.get_one
      description: |
        Get one action.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Action requested
          schema:
            $ref: '#/definitions/Action'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.actions:actions_controller.put
      description: |
        Update an action.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: action
          in: body
          description: Action content
          schema:
            $ref: '#/definitions/ActionUpdateRequest'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Action updated
          schema:
            $ref: '#/definitions/Action'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.actions:actions_controller.delete
      description: |
        Delete an action.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '204':
          description: Action deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actions/views/parameters/{action_id}:
    get:
      operationId: st2api.controllers.v1.actionviews:parameters_view_controller.get_one
      description: |
        Get parameters for an action.
      parameters:
        - name: action_id
          in: path
          description: Entity id
          type: string
          required: true
      responses:
        '200':
          description: An object containing action parameters
          schema:
            $ref: '#/definitions/ActionParameters'
          examples:
            application/json:
              parameters:
                cmd:
                  type: string
                # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actions/views/overview:
    get:
      operationId: st2api.controllers.v1.actionviews:overview_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.ACTION_LIST }}
      description: Returns a list of all the actions with runner parameters included.
      parameters:
        - name: exclude_attributes
          in: query
          description: List of attributes to exclude
          type: array
          items:
            type: string
          required: false
        - name: limit
          in: query
          description: Number of actions to get
          type: integer
        - name: id
          in: query
          description: Action id filter
          type: string
        - name: name
          in: query
          description: Action name filter
          type: string
        - name: pack
          in: query
          description: Action pack name filter
          type: string
      responses:
        '200':
          description: List of actions
          schema:
            type: array
            items:
              $ref: '#/definitions/Action'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actions/views/overview/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.actionviews:overview_controller.get_one
      description: |
        Get one action with runner parameters included.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '200':
          description: Action requested
          schema:
            $ref: '#/definitions/Action'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actions/views/entry_point/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.actionviews:entry_point_controller.get_one
      description: |
        Get code of the action's entry_point.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '200':
          description: Entry point code
          schema:
            type: string
          examples:
            text/plain: |-
              # Licensed to the StackStorm, Inc ('StackStorm') under one or more
              # contributor license agreements.  See the NOTICE file distributed with
              # this work for additional information regarding copyright ownership.
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actionalias:
    get:
      operationId: st2api.controllers.v1.actionalias:action_alias_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.ACTION_ALIAS_LIST }}
      description: |
          Get list of action-alias.
      parameters:
        - name: pack
          in: query
          description: Only return resources belonging to the provided pack
          type: string
      responses:
        '200':
          description: List of action alias.
          schema:
            type: array
            items:
              $ref: '#/definitions/ActionAlias'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.actionalias:action_alias_controller.post
      description: |
        Create actionalias.
      parameters:
        - name: action_alias
          in: body
          description: Action alias file.
          schema:
            $ref: '#/definitions/ActionAlias'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '201':
          description: Action alias created
          schema:
            $ref: '#/definitions/ActionAlias'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actionalias/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.actionalias:action_alias_controller.get_one
      x-requirements:
        ref_or_id: (?!match)(?!help).*
      description: |
        Get a specific actionalias based on ref or id.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Action alias requested
          schema:
            $ref: '#/definitions/ActionAlias'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.actionalias:action_alias_controller.put
      description: Update action alias
      parameters:
        - name: ref_or_id
          in: path
          description: Name or ID of the action alias.
          type: string
          required: true
        - name: action_alias
          in: body
          description: JSON/YAML file containing the action alias to update.
          schema:
            $ref: '#/definitions/ActionAlias'
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Action alias updated.
          schema:
            $ref: '#/definitions/ActionAlias'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.actionalias:action_alias_controller.delete
      description: |
        Delete action alias based on ref_or_id.
      parameters:
        - name: ref_or_id
          in: path
          description: Name or ID of the action alias.
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '204':
          description: Action alias deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actionalias/match:
    post:
      operationId: st2api.controllers.v1.actionalias:action_alias_controller.match
      x-permissions: {{ PERMISSION_TYPE.ACTION_ALIAS_MATCH }}
      description: |
        Match actionalias based on format (representation or display).
      parameters:
        - name: action_alias_match_api
          in: body
          description: Object containing the format to be matched.
          schema:
            $ref: '#/definitions/ActionAliasMatchRequest'
      responses:
        '200':
          description: Action alias match pattern
          schema:
            $ref: '#/definitions/ActionAliasMatch'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/actionalias/help:
    get:
      operationId: st2api.controllers.v1.actionalias:action_alias_controller.help
      x-permissions: {{ PERMISSION_TYPE.ACTION_ALIAS_HELP }}
      description: |
        Get available help strings for action aliases.
      parameters:
        - name: pack
          in: query
          description: Entity pack
          type: string
        - name: filter
          in: query
          description: Regex filter
          type: string
        - name: limit
          in: query
          description: Number of actions to get
          type: integer
          default: 100
        - name: offset
          in: query
          description: Number of actions offset
          type: integer
          default: 0
      responses:
        '200':
          description: Action alias match pattern
          schema:
            $ref: '#/definitions/ActionAliasHelp'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/aliasexecution:
    post:
      operationId: st2api.controllers.v1.aliasexecution:action_alias_execution_controller.post
      description: |
        Create alias execution.
      parameters:
        - name: payload
          in: body
          description: Alias execution payload.
          schema:
            $ref: '#/definitions/AliasExecution'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '201':
          description: Action alias created
          schema:
            $ref: '#/definitions/AliasExecution'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/executions:
    get:
      operationId: st2api.controllers.v1.actionexecutions:action_executions_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.EXECUTION_LIST }}
      x-log-result: false
      description: Returns a list of all executions.
      parameters:
        - name: exclude_attributes
          in: query
          description: List of attributes to exclude
          type: array
          items:
            type: string
          required: false
        - name: limit
          in: query
          description: Number of actions to get
          type: integer
          default: 100
        - name: offset
          in: query
          description: Number of actions offset
          type: integer
          default: 0
        - name: sort
          in: query
          description: Comma-separated list of fields to sort by
          type: string
        - name: sort_asc
          in: query
          description: Sort in ascending order
          type: string
        - name: sort_desc
          in: query
          description: Sort in descending order
          type: string
        - name: id
          in: query
          description: Execution id filter
          type: array
          items:
            type: string
        - name: status
          in: query
          description: Execution status filter
          type: string
        - name: parent
          in: query
          description: Parent execution filter
          type: string
        - name: trigger_type
          in: query
          description: Trigger type filter
          type: string
        - name: trigger
          in: query
          description: Trigger filter
          type: string
        - name: trigger_instance
          in: query
          description: Trigger instance filter
          type: string
        - name: rule
          in: query
          description: Rule filter
          type: string
        - name: action
          in: query
          description: Action ref filter
          type: string
        - name: runner
          in: query
          description: Runner filter
          type: string
        - name: user
          in: query
          description: User filter
          type: string
        - name: liveaction
          in: query
          description: Liveaction id filter
          type: string
        - name: timestamp
          in: query
          description: Start timestamp filter
          type: string
          pattern: {{ ISO8601_UTC_REGEX }}
        - name: timestamp_lt
          in: query
          description: Start timestamp less than filter
          type: string
          pattern: {{ ISO8601_UTC_REGEX }}
        - name: timestamp_gt
          in: query
          description: Start timestamp greater than filter
          type: string
          pattern: {{ ISO8601_UTC_REGEX }}
      responses:
        '200':
          description: List of executions
          schema:
            type: array
            items:
              $ref: '#/definitions/Execution'
          examples:
            application/json:
              - trigger:
                  type: object
                action:
                  type: object
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.actionexecutions:action_executions_controller.post
      x-log-result: false
      description: |
        Create a new execution.
      parameters:
        - name: liveaction_api
          in: body
          description: Execution request
          schema:
            $ref: '#/definitions/ExecutionRequest'
        - name: show_secrets
          in: query
          description: Show secrets in plain text
          type: boolean
        - name: st2-context
          in: header
          description: Additional execution context
          type: string
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Execution being created
          schema:
            $ref: '#/definitions/Execution'
          examples:
            application/json:
              trigger:
                type: object
              action:
                type: object
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/executions/{id}:
    get:
      operationId: st2api.controllers.v1.actionexecutions:action_executions_controller.get_one
      x-log-result: false
      description: |
        Get one execution.
      parameters:
        - name: id
          in: path
          description: Entity id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Execution requested
          schema:
            $ref: '#/definitions/Execution'
          examples:
            application/json:
              trigger:
                type: object
              action:
                type: object
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.actionexecutions:action_executions_controller.delete
      description: |
        Cancel an execution.
      parameters:
        - name: id
          in: path
          description: Entity id
          type: string
          required: true
        - name: show_secrets
          in: query
          description: Show secrets in plain text
          type: boolean
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '204':
          description: Execution cancelled
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/executions/{id}/re_run:
    post:
      operationId: st2api.controllers.v1.actionexecutions:action_execution_rerun_controller.post
      x-log-result: false
      description: |
        Create a new execution.
      parameters:
        - name: id
          in: path
          description: Entity id
          type: string
          required: true
        - name: spec_api
          in: body
          description: Execution request
          schema:
            type: object
            properties:
              parameters:
                type: object
                default: {}
              tasks:
                type: array
                default: []
              reset:
                type: array
                default: []
              user:
                type: string
                default: ''
        - name: show_secrets
          in: query
          description: Show secrets in plain text
          type: boolean
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Single action being created
          schema:
            $ref: '#/definitions/Execution'
          examples:
            application/json:
              trigger:
                type: object
              action:
                type: object
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/executions/{id}/attribute/{attribute}:
    get:
      operationId: st2api.controllers.v1.actionexecutions:action_execution_attribute_controller.get
      x-log-result: false
      description: |
        Get one execution.
      parameters:
        - name: id
          in: path
          description: Entity id
          type: string
          required: true
        - name: attribute
          in: path
          description: Attribute to fetch
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Execution attribute requested
          examples:
            application/json:
              trigger:
                type: object
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/executions/{id}/children:
    get:
      operationId: st2api.controllers.v1.actionexecutions:action_execution_children_controller.get_one
      x-log-result: false
      description: |
        Get one execution.
      parameters:
        - name: id
          in: path
          description: Entity id
          type: string
          required: true
        - name: depth
          in: query
          description: Depth to fetch
          type: integer
          default: -1
        - name: result_fmt
          in: query
          description: Result format
          type: string
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Execution attribute requested
          schema:
            type: array
            items:
              $ref: '#/definitions/Execution'
          examples:
            application/json:
              trigger:
                type: object
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/executions/views/filters:
    get:
      operationId: st2api.controllers.v1.executionviews:filters_controller.get_all
      description: |
        Get a list of distinct values for the execution filters.
      parameters:
        - name: types
          in: query
          description: List of types of filters to return
          type: array
          items:
            type: string
      responses:
        '200':
          description: A number of distinct values for the requested filters
          schema:
            $ref: '#/definitions/ExecutionFilters'
          examples:
            application/json:
              trigger:
                type: object
              action:
                type: object
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/keys:
    get:
      operationId: st2api.controllers.v1.keyvalue:key_value_pair_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.KEY_VALUE_PAIR_LIST }}
      description: Returns a list of all key value pairs.
      parameters:
        - name: prefix
          in: query
          description: |
              Only return values which name starts with the provided prefix.
          type: string
        - name: scope
          in: query
          description: "Scope the item is under. Example: 'user'."
          type: string
        - name: decrypt
          in: query
          description: Decrypt secrets and display plain text
          type: boolean
        - name: user
          in: query
          description: Entity owner
          type: string
        - name: name
          in: query
          description: Entity name filter
          type: string
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: List of key value pairs
          schema:
            type: array
            items:
              $ref: '#/definitions/KeyValuePair'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/keys/{name}:
    get:
      operationId: st2api.controllers.v1.keyvalue:key_value_pair_controller.get_one
      description: |
        Get a specific key vale pair based on key_name.
      parameters:
        - name: name
          in: path
          description: Key Name
          type: string
          required: true
        - name: scope
          in: query
          description: "Scope the item is under. Example: 'user'."
          type: string
        - name: decrypt
          in: query
          description: Decrypt secrets and display plain text.
          type: boolean
        - name: user
          in: query
          description: Entity owner
          type: string
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Key value pair requested.
          schema:
            $ref: '#/definitions/KeyValuePair'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.keyvalue:key_value_pair_controller.put
      description: |
        Create a new key value pair or update an existing one.
      parameters:
        - name: name
          in: path
          description: Key Name.
          type: string
          required: true
        - name: kvp
          in: body
          description: Key Value pair content.
          schema:
            $ref: '#/definitions/KeyValuePairRequest'
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Key set/updated.
          schema:
            $ref: '#/definitions/KeyValuePair'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.keyvalue:key_value_pair_controller.delete
      description: Delete a Key.
      parameters:
        - name: name
          in: path
          description: Key Name.
          type: string
          required: true
        - name: scope
          in: query
          description: "Scope the item is under. Example: 'user'."
          type: string
        - name: user
          in: query
          description: Entity owner
          type: string
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '204':
          description: Key deleted.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs:
    get:
      operationId: st2api.controllers.v1.packs:packs_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.PACK_LIST }}
      description: Get list of installed packs.
      parameters:
        - name: name
          in: query
          description: Name of a pack
          type: string
        - name: ref
          in: query
          description: ref for a pack
          type: string
      responses:
        '200':
          description: List of installed packs.
          schema:
            type: array
            items:
              $ref: '#/definitions/PacksList'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.packs:packs_controller.get_one
      description: Get information about an installed pack.
      parameters:
        - name: ref_or_id
          in: path
          description: Reference of the pack.
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Information about a pack.
          schema:
            type: object
            items:
              $ref: '#/definitions/PackView'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs/install:
    post:
      operationId: st2api.controllers.v1.packs:packs_controller.install.post
      x-permissions: {{ PERMISSION_TYPE.PACK_INSTALL }}
      description: |
        Install new packs..
      parameters:
        - name: pack_install_request
          in: body
          description: Packs to be installed
          schema:
            $ref: '#/definitions/PacksInstall'
      responses:
        '200':
          description: Packs Installed.
          schema:
            $ref: '#/definitions/PacksList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs/uninstall:
    post:
      operationId: st2api.controllers.v1.packs:packs_controller.uninstall.post
      x-permissions: {{ PERMISSION_TYPE.PACK_UNINSTALL }}
      description: |
        Uninstall packs.
      parameters:
        - name: pack_uninstall_request
          in: body
          description: Packs to be uninstalled
          schema:
            $ref: '#/definitions/PacksUninstall'
      responses:
        '200':
          description: Packs Uninstalled.
          schema:
            $ref: '#/definitions/PacksList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs/register:
    post:
      operationId: st2api.controllers.v1.packs:packs_controller.register.post
      x-permissions: {{ PERMISSION_TYPE.PACK_REGISTER }}
      description: |
        Register pack(s): sync all file changes with DB.
      parameters:
        - name: pack_register_request
          in: body
          description: Pack(s) to be Registered
          schema:
            $ref: '#/definitions/PacksRegister'
      responses:
        '200':
          description: Pack(s) Registered.
          schema:
            $ref: '#/definitions/PacksList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs/index/search:
    post:
      operationId: st2api.controllers.v1.packs:packs_controller.index.search.post
      x-permissions: {{ PERMISSION_TYPE.PACK_SEARCH }}
      description: |
        Search the index with a query or Get information about an available pack from the index.
      parameters:
        - name: pack_search_request
          in: body
          description: A query to search a pack or a pack name to get its details
          schema:
            $ref: '#/definitions/PacksSearchShow'
      responses:
        '200':
          description: Pack search results.
          schema:
            items:
              - $ref: '#/definitions/PacksList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  # TODO: No unit test for /packs/index/health
  /api/v1/packs/index/health:
    get:
      operationId: st2api.controllers.v1.packs:packs_controller.index.get
      x-permissions: {{ PERMISSION_TYPE.PACK_VIEW_INDEX_HEALTH }}
      description: To get the state of all indexes used by your StackStorm instance.
      responses:
        '200':
          description: Index health.
          schema:
            type: object
            items:
              $ref: '#/definitions/PackIndex'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs/views/files/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.packs:packs_controller.views.files.get_one
      x-log-result: false
      description: Get information about an installed pack.
      parameters:
        - name: ref_or_id
          in: path
          description: Reference of the pack.
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Information about a pack.
          schema:
            type: array
            items:
              $ref: '#/definitions/PackView'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/packs/views/file/{ref_or_id}/{file_path}:
    get:
      operationId: st2api.controllers.v1.packs:packs_controller.views.file.get_one
      x-requirements:
        file_path: .*
      x-log-result: false
      description: Get information about an installed pack.
      parameters:
        - name: ref_or_id
          in: path
          description: Reference of the pack.
          type: string
          required: true
        - name: file_path
          in: path
          description: Path to the file.
          type: string
          required: true
        - name: if-none-match
          in: header
          description: ETag to compare to.
          type: string
        - name: if-modified-since
          in: header
          description: Date of last known modification.
          type: string
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Content of the file.
        '304':
          description: File has not been modified.
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/configs:
    get:
      operationId: st2api.controllers.v1.pack_configs:pack_configs_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.PACK_LIST }}
      description: Retrieve configs for all the packs.
      responses:
        '200':
          description: Get packs config.
          # schema:
            # type: array
              # items:
                # $ref: '#/definitions/PackConfig'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/configs/{pack_ref}:
    get:
      operationId: st2api.controllers.v1.pack_configs:pack_configs_controller.get_one
      description: Retrieve config for a particular pack.
      parameters:
        - name: pack_ref
          type: string
          in: path
          description: Pack ref to retrieve config for the pack.
          required: true
      responses:
        '200':
          description: Config for a particular pack.
          schema:
            type: object
            items:
              $ref: '#/definitions/PackConfigView'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.pack_configs:pack_configs_controller.put
      description: Create a new config for the action.
      parameters:
        - name: pack_ref
          in: path
          description: Pack ref to create config.
          type: string
          required: true
        - name: pack_uninstall_request
          in: body
          description: Pack config content
          schema:
            $ref: '#/definitions/PackConfigContent'
      responses:
        '200':
          description: Config for a particular pack.
          schema:
            type: object
            items:
              $ref: '#/definitions/PackConfigCreate'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/config_schemas:
    get:
      operationId: st2api.controllers.v1.pack_config_schemas:pack_config_schema_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.PACK_LIST }}
      description: Retrieve config schema for all the packs.
      responses:
        '200':
          description: Get packs config schema.
          # schema:
            # type: array
              # items:
                # $ref: '#/definitions/PackConfig'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/config_schemas/{pack_ref}:
    get:
      operationId: st2api.controllers.v1.pack_config_schemas:pack_config_schema_controller.get_one
      description: Retrieve config schema for a particular pack.
      parameters:
        - name: pack_ref
          type: string
          in: path
          description: Pack ref to retrieve config schema for the pack.
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Config schema for a particular pack.
          schema:
            type: object
            items:
              $ref: '#/definitions/PackConfigView'
          examples:
            application/json:
              ref: 'core.local'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policytypes:
    get:
      operationId: st2api.controllers.v1.policies:policy_type_controller.get_all
      description: Returns a list of all the policy types.
      parameters:
        - name: resource_type
          in: query
          description: Policy type resource type
          type: string
        - name: name
          in: query
          description: Policy type name
          type: string
      responses:
        '200':
          description: List of policy types
          schema:
            type: array
            items:
              $ref: '#/definitions/PolicyTypeList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policytypes/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.policies:policy_type_controller.get_one
      description: Returns a policy types based on id.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id.
          type: string
          required: true
      responses:
        '200':
          description: Specific policy type.
          schema:
            type: object
            items:
              $ref: '#/definitions/PolicyTypeList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policies:
    get:
      operationId: st2api.controllers.v1.policies:policy_controller.get_all
      description: |
        List of policies
      parameters:
        - name: pack
          in: query
          description: Policies pack
          type: string
        - name: name
          in: query
          description: Policies name
          type: string
      responses:
        '200':
          description: Policy created successfully.
          schema:
            items:
              - $ref: '#/definitions/PolicyList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.policies:policy_controller.post
      description: |
        Create Policy
      parameters:
        - name: instance
          in: body
          description: Policy details in yaml/json file
          schema:
            $ref: '#/definitions/PolicyCreate'
          required: true
      responses:
        '200':
          description: Policy created successfully.
          schema:
            items:
              - $ref: '#/definitions/PolicyList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/policies/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.policies:policy_controller.get_one
      description: |
        Get deatials of specific policy based on ref or id
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id.
          type: string
          required: true
      responses:
        '200':
          description: Policy found.
          schema:
            items:
              - $ref: '#/definitions/PolicyList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.policies:policy_controller.put
      description: |
        Update Policy
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id.
          type: string
          required: true
        - name: instance
          in: body
          description: Policy details in yaml/json file
          schema:
            $ref: '#/definitions/PolicyCreate'
          required: true
      responses:
        '200':
          description: Policy updated successfully.
          schema:
            items:
              - $ref: '#/definitions/PolicyList'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.policies:policy_controller.delete
      description: |
        Delete a policy.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id.
          type: string
          required: true
      responses:
        '204':
          description: Policy deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rbac/permission_types:
    get:
      operationId: st2api.controllers.v1.rbac:permission_types_controller.get_all
      description: Returns a list of all permission types.
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Dictionary of permission types by resource types.
          schema:
            type: object
          examples:
            application/json:
              runner_type:
                - runner_type_list
                - runner_type_view
                - runner_type_modify
                - runner_type_all
              pack:
                - pack_list
                - pack_view
                - pack_create
                - pack_modify
                - pack_delete
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rbac/permission_types/{resource_type}:
    get:
      operationId: st2api.controllers.v1.rbac:permission_types_controller.get_one
      description: Returns a list of all permission types for particular resource type.
      parameters:
        - name: resource_type
          in: path
          description: Resource type.
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: List of permission types.
          schema:
            type: array
            items:
              type: string
          examples:
            application/json:
              - runner_type_list
              - runner_type_view
              - runner_type_modify
              - runner_type_all
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rbac/roles:
    get:
      operationId: st2api.controllers.v1.rbac:roles_controller.get_all
      description: Returns a list of all roles.
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: List of all roles.
          schema:
            type: array
            items:
              type: object
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rbac/roles/{name_or_id}:
    get:
      operationId: st2api.controllers.v1.rbac:roles_controller.get_one
      description: Get one role.
      parameters:
        - name: name_or_id
          in: path
          description: Entity name or id.
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: List of roles.
          schema:
            type: object
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rules:
    get:
      operationId: st2api.controllers.v1.rules:rule_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.RULE_LIST }}
      description: Returns a list of all rules.
      parameters:
        - name: exclude_attributes
          in: query
          description: List of attributes to exclude
          type: array
          items:
            type: string
          required: false
        - name: limit
          in: query
          description: Number of entities to get
          type: integer
        - name: id
          in: query
          description: Entity id filter
          type: array
          items:
            type: string
        - name: name
          in: query
          description: Entity name filter
          type: string
        - name: pack
          in: query
          description: Entity pack name filter
          type: string
        - name: action
          in: query
          description: Action ref filter
          type: string
        - name: trigger
          in: query
          description: Trigger filter
          type: string
        - name: enabled
          in: query
          description: Enabled filter
          type: string
      responses:
        '200':
          description: List of rules
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.rules:rule_controller.post
      description: |
        Create a new rule.
      parameters:
        - name: rule
          in: body
          description: Rule content
          schema:
            $ref: '#/definitions/Rule'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Single action being created
          schema:
            $ref: '#/definitions/Rule'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rules/{ref_or_id}:
    get:
      x-requirements:
        ref_or_id: (?!views).*
      operationId: st2api.controllers.v1.rules:rule_controller.get_one
      description: |
        Get one rule.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Rule requested
          schema:
            $ref: '#/definitions/Rule'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rules/{rule_ref_or_id}:
    put:
      operationId: st2api.controllers.v1.rules:rule_controller.put
      description: |
        Update a rule.
      parameters:
        - name: rule_ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: rule
          in: body
          description: Rule content
          schema:
            $ref: '#/definitions/Rule'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Action updated
          schema:
            $ref: '#/definitions/Rule'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.rules:rule_controller.delete
      description: |
        Delete a rule.
      parameters:
        - name: rule_ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '204':
          description: Rule deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rules/views:
    get:
      operationId: st2api.controllers.v1.ruleviews:rule_view_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.RULE_LIST }}
      description: Returns a list of all rules.
      parameters:
        - name: exclude_attributes
          in: query
          description: List of attributes to exclude
          type: array
          items:
            type: string
          required: false
        - name: limit
          in: query
          description: Number of entities to get
          type: integer
        - name: id
          in: query
          description: Entity id filter
          type: array
          items:
            type: string
        - name: name
          in: query
          description: Entity name filter
          type: string
        - name: pack
          in: query
          description: Entity pack name filter
          type: string
        - name: action
          in: query
          description: Action ref filter
          type: string
        - name: trigger
          in: query
          description: Trigger filter
          type: string
        - name: enabled
          in: query
          description: Enabled filter
          type: string
      responses:
        '200':
          description: List of rules
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rules/views/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.ruleviews:rule_view_controller.get_one
      description: |
        Get one rule.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '200':
          description: Rule requested
          schema:
            $ref: '#/definitions/Rule'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/ruletypes:
    get:
      operationId: st2api.controllers.v1.ruletypes:rule_types_controller.get_all
      description: Returns a list of all rule types.
      responses:
        '200':
          description: List of rules
          schema:
            type: array
            items:
              $ref: '#/definitions/RuleType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/ruletypes/{id}:
    get:
      operationId: st2api.controllers.v1.ruletypes:rule_types_controller.get_one
      description: Get one rule type.
      parameters:
        - name: id
          in: path
          description: Entity id.
          type: string
          required: true
      responses:
        '200':
          description: RuleType requested
          schema:
            $ref: '#/definitions/RuleType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/runnertypes:
    get:
      operationId: st2api.controllers.v1.runnertypes:runner_types_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.RUNNER_LIST }}
      description: Returns a list of all runner types.
      parameters:
        - name: exclude_attributes
          in: query
          description: List of attributes to exclude
          type: array
          items:
            type: string
          required: false
        - name: limit
          in: query
          description: Number of entities to get
          type: integer
        - name: id
          in: query
          description: Entity id filter
          type: array
          items:
            type: string
        - name: name
          in: query
          description: Entity name filter
          type: string
        - name: pack
          in: query
          description: Entity pack name filter
          type: string
        - name: action
          in: query
          description: Action ref filter
          type: string
        - name: trigger
          in: query
          description: Trigger filter
          type: string
        - name: enabled
          in: query
          description: Enabled filter
          type: string
      responses:
        '200':
          description: List of rules
          schema:
            type: array
            items:
              $ref: '#/definitions/RunnerType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/runnertypes/{name_or_id}:
    get:
      operationId: st2api.controllers.v1.runnertypes:runner_types_controller.get_one
      description: |
        Get one runner type.
      parameters:
        - name: name_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: RunnerType requested
          schema:
            $ref: '#/definitions/RunnerType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.runnertypes:runner_types_controller.put
      description: |
        Update a runner type.
      parameters:
        - name: name_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: runner_type_api
          in: body
          description: RunnerType content
          schema:
            $ref: '#/definitions/RunnerType'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: RunnerType updated
          schema:
            $ref: '#/definitions/RunnerType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/sensortypes:
    get:
      operationId: st2api.controllers.v1.sensors:sensor_type_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.SENSOR_LIST }}
      description: Returns a list of all sensor types.
      parameters:
        - name: exclude_attributes
          in: query
          description: List of attributes to exclude
          type: array
          items:
            type: string
          required: false
        - name: limit
          in: query
          description: Number of entities to get
          type: integer
        - name: id
          in: query
          description: Entity id filter
          type: array
          items:
            type: string
        - name: name
          in: query
          description: Entity name filter
          type: string
        - name: pack
          in: query
          description: Entity pack name filter
          type: string
        - name: action
          in: query
          description: Action ref filter
          type: string
        - name: trigger
          in: query
          description: Trigger filter
          type: string
        - name: enabled
          in: query
          description: Enabled filter
          type: string
      responses:
        '200':
          description: List of rules
          schema:
            type: array
            items:
              $ref: '#/definitions/SensorType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/sensortypes/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.sensors:sensor_type_controller.get_one
      description: |
        Get one sensor type.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: SensorType requested
          schema:
            $ref: '#/definitions/SensorType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.sensors:sensor_type_controller.put
      description: |
        Update a sensor type.
      parameters:
        - name: ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: sensor_type
          in: body
          description: SensorType content
          schema:
            $ref: '#/definitions/SensorType'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: SensorType updated
          schema:
            $ref: '#/definitions/SensorType'
          examples:
            application/json:
              ref: 'core.webhook'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/apikeys:
    get:
      operationId: st2api.controllers.v1.auth:api_key_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.API_KEY_LIST }}
      description: Returns a list of all actions.
      parameters:
        - name: show_secrets
          in: query
          description: Show secrets in plain text
          type: boolean
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: List of actions
          schema:
            type: array
            items:
              $ref: '#/definitions/ApiKey'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.auth:api_key_controller.post
      description: |
        Create a new action.
      parameters:
        - name: api_key_api
          in: body
          description: Action content
          schema:
            $ref: '#/definitions/ApiKeyRequest'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Single action being created
          schema:
            $ref: '#/definitions/ApiKey'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/apikeys/{api_key_id_or_key}:
    get:
      operationId: st2api.controllers.v1.auth:api_key_controller.get_one
      description: |
        Get one action.
      parameters:
        - name: api_key_id_or_key
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: show_secrets
          in: query
          description: Show secrets in plain text
          type: boolean
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Action requested
          schema:
            $ref: '#/definitions/ApiKey'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.auth:api_key_controller.put
      description: |
        Update an action.
      parameters:
        - name: api_key_id_or_key
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: api_key_api
          in: body
          description: Action content
          schema:
            $ref: '#/definitions/ApiKeyRequest'
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Action updated
          schema:
            $ref: '#/definitions/ApiKey'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.auth:api_key_controller.delete
      description: |
        Delete an action.
      parameters:
        - name: api_key_id_or_key
          in: path
          description: Entity reference or id
          type: string
          required: true
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '204':
          description: Action deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/ruleenforcements:
    get:
      operationId: st2api.controllers.v1.rule_enforcements:rule_enforcements_controller.get_all
      x-permissions: {{ PERMISSION_TYPE.RULE_ENFORCEMENT_LIST }}
      description: Returns a list of all the rule enforcements.
      parameters:
        - name: limit
          in: query
          description: List N most recent rule enforcements.
          type: string
          default: 50
        - name: execution
          in: query
          description: Execution to filter the list.
          type: string
        - name: rule_ref
          in: query
          description: Rule ref to filter the list.
          type: string
        - name: rule_id
          in: query
          description: Rule id to filter the list..
          type: string
        - name: trigger_instance
          in: query
          description: Trace instance id to filter the list.
          type: string
        - name: enforced_at_gt
          in: query
          description: |
              Only return enforcements with enforced_at greater than the one provided. Use time in the format.
          type: string
          pattern: {{ ISO8601_UTC_REGEX }}
        - name: enforced_at_lt
          in: query
          description: |
              Only return enforcements with enforced_at lower than the one provided. Use time in the format.
          type: string
          pattern: {{ ISO8601_UTC_REGEX }}
      responses:
        '200':
          description: List of rule enforcements
          schema:
            type: array
            items:
              $ref: '#/definitions/RuleEnforcementsList'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/ruleenforcements/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.rule_enforcements:rule_enforcements_controller.get_one
      description: Return a specific rule enforcement based on id.
      parameters:
        - name: ref_or_id
          in: path
          description: entities id
          type: string
      x-parameters:
        - name: user
          in: context
          x-as: requester_user
          description: User running the action
      responses:
        '200':
          description: Rule Enforcements based on ref or id
          schema:
            type: object
            items:
              $ref: '#/definitions/RuleEnforcementsList'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/timers:
    get:
      operationId: st2api.controllers.v1.timers:timers_controller.get_all
      description: Returns a list of all the timers.
      parameters:
        - name: timer_type
          in: query
          description: Type of timer
          type: string
      responses:
        '200':
          description: List of timers
          schema:
            type: array
            items:
              $ref: '#/definitions/TimersList'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/timers/{ref_or_id}:
    get:
      operationId: st2api.controllers.v1.timers:timers_controller.get_one
      description: Return a specific timer based on id.
      parameters:
        - name: ref_or_id
          in: path
          description: entities id
          type: string
      responses:
        '200':
          description: Trace
          schema:
            type: object
            items:
              $ref: '#/definitions/TimersList'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/traces:
    get:
      operationId: st2api.controllers.v1.traces:traces_controller.get_all
      description: Returns a list of all the traces.
      parameters:
        - name: limit
          in: query
          description: Limit number of traces.
          type: integer
          # required: true
          # default: 50
        - name: trace_tag
          in: query
          description: Trace-tag to filter the list.
          type: string
        - name: execution
          in: query
          description: Execution to filter the list.
          type: string
        - name: rule
          in: query
          description: Rule to filter the list..
          type: string
        - name: trigger_instance
          in: query
          description: TraceInstance to filter the list.
          type: string
        - name: sort_asc
          in: query
          description: |
              Sort in ascending order by start timestamp, asc/ascending (earliest first)
          type: string
        - name: sort_desc
          in: query
          description: |
              Sort in descending order by start timestamp, desc/descending (latest first)
          type: string
      responses:
        '200':
          description: List of traces
          schema:
            type: array
            items:
              $ref: '#/definitions/TracesList'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/traces/{id}:
    get:
      operationId: st2api.controllers.v1.traces:traces_controller.get_one
      description: Returns a list of all the traces.
      parameters:
        - name: id
          in: path
          description: entities id
          type: string
      responses:
        '200':
          description: Trace
          schema:
            type: object
            items:
              $ref: '#/definitions/TracesList'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/triggertypes:
    get:
      operationId: st2api.controllers.v1.triggers:triggertype_controller.get_all
      description: Returns a list of all trigger types.
      responses:
        '200':
          description: List of trigger types
          schema:
            type: array
            items:
              $ref: '#/definitions/TriggerType'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.triggers:triggertype_controller.post
      description: |
        Create a new trigger type.
      parameters:
        - name: triggertype
          in: body
          description: TriggerType content
          schema:
            $ref: '#/definitions/TriggerTypeRequest'
      responses:
        '200':
          description: Single trigger type being created
          schema:
            $ref: '#/definitions/TriggerType'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/triggertypes/{triggertype_ref_or_id}:
    get:
      operationId: st2api.controllers.v1.triggers:triggertype_controller.get_one
      description: |
        Get one trigger type.
      parameters:
        - name: triggertype_ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '200':
          description: TriggerType requested
          schema:
            $ref: '#/definitions/TriggerType'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.triggers:triggertype_controller.put
      description: |
        Update a trigger type.
      parameters:
        - name: triggertype_ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: triggertype
          in: body
          description: TriggerType content
          schema:
            $ref: '#/definitions/TriggerTypeRequest'
      responses:
        '200':
          description: TriggerType updated
          schema:
            $ref: '#/definitions/TriggerType'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.triggers:triggertype_controller.delete
      description: |
        Delete a trigger type.
      parameters:
        - name: triggertype_ref_or_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '204':
          description: TriggerType deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/triggers:
    get:
      operationId: st2api.controllers.v1.triggers:trigger_controller.get_all
      description: Returns a list of all triggers.
      responses:
        '200':
          description: List of triggers
          schema:
            type: array
            items:
              $ref: '#/definitions/Trigger'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: st2api.controllers.v1.triggers:trigger_controller.post
      description: |
        Create a new triggers.
      parameters:
        - name: trigger
          in: body
          description: Trigger content
          schema:
            $ref: '#/definitions/TriggerRequest'
      responses:
        '200':
          description: Single trigger being created
          schema:
            $ref: '#/definitions/Trigger'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/triggers/{trigger_id}:
    get:
      operationId: st2api.controllers.v1.triggers:trigger_controller.get_one
      description: |
        Get one trigger.
      parameters:
        - name: trigger_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '200':
          description: Trigger requested
          schema:
            $ref: '#/definitions/Trigger'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: st2api.controllers.v1.triggers:trigger_controller.put
      description: |
        Update a trigger.
      parameters:
        - name: trigger_id
          in: path
          description: Entity reference or id
          type: string
          required: true
        - name: trigger
          in: body
          description: Trigger content
          schema:
            $ref: '#/definitions/TriggerRequest'
      responses:
        '200':
          description: Trigger updated
          schema:
            $ref: '#/definitions/Trigger'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: st2api.controllers.v1.triggers:trigger_controller.delete
      description: |
        Delete a trigger.
      parameters:
        - name: trigger_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '204':
          description: Trigger deleted
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/triggerinstances:
    get:
      operationId: st2api.controllers.v1.triggers:triggerinstance_controller.get_all
      description: Returns a list of all trigger instances.
      parameters:
        - name: limit
          in: query
          description: Number of actions to get
          type: integer
        - name: trigger
          in: query
          description: Trigger filter
          type: string
        - name: timestamp_lt
          in: query
          description: Start timestamp less than filter
          type: string
          pattern: {{ ISO8601_UTC_REGEX }}
        - name: timestamp_gt
          in: query
          description: Start timestamp greater than filter
          type: string
          pattern: {{ ISO8601_UTC_REGEX }}
      responses:
        '200':
          description: List of trigger instances
          schema:
            type: array
            items:
              $ref: '#/definitions/TriggerInstance'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/triggerinstances/{instance_id}:
    get:
      operationId: st2api.controllers.v1.triggers:triggerinstance_controller.get_one
      description: |
        Get one trigger instance.
      parameters:
        - name: instance_id
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '200':
          description: Trigger instance requested
          schema:
            $ref: '#/definitions/TriggerInstance'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/triggerinstances/{trigger_instance_id}/re_emit:
    post:
      operationId: st2api.controllers.v1.triggers:triggerinstance_resend_controller.post
      description: |
        Re-emit a trigger instance.
      parameters:
        - name: trigger_instance_id
          in: path
          description: Entity id
          type: string
          required: true
      responses:
        '200':
          description: Single trigger being created
          schema:
            $ref: '#/definitions/TriggerInstance'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/webhooks:
    get:
      operationId: st2api.controllers.v1.webhooks:webhooks_controller.get_all
      description: Returns a list of all webhooks.
      responses:
        '200':
          description: List of webhooks
          schema:
            type: array
            items:
              $ref: '#/definitions/Webhook'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/webhooks/{hook}:
    post:
      operationId: st2api.controllers.v1.webhooks:webhooks_controller.post
      x-requirements:
        hook: .*
      description: |
        Trigger a webhook.
      parameters:
        - name: hook
          in: path
          description: Webhook path
          type: string
          required: true
        - name: body
          in: body
          description: Webhook payload
          schema:
            $ref: '#/definitions/WebhookBody'
      x-parameters:
        - name: headers
          in: request
          description: List of headers attached to the request.
      responses:
        '201':
          description: Single action being created
          schema:
            $ref: '#/definitions/WebhookBody'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/webhooks/{name}:
    get:
      operationId: st2api.controllers.v1.actions:actions_controller.get_one
      description: |
        Get one action.
      parameters:
        - name: name
          in: path
          description: Entity reference or id
          type: string
          required: true
      responses:
        '200':
          description: Action requested
          schema:
            $ref: '#/definitions/Action'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /api/exp/validation/mistral:
    post:
      operationId: st2api.controllers.exp.validation:mistral_validation_controller.post
      description: |
        Validate Mistral YAML definition.
      parameters:
        - name: def_yaml
          in: body
          description: Mistral definition
          schema:
            type: string
      responses:
        '200':
          description: List of validation errors
          schema:
            type: array
            items:
              $ref: '#/definitions/ValidationError'
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /auth/v1/tokens:
    post:
      operationId: st2auth.controllers.v1.auth:token_controller.post
      description: |
        Authenticates a user with `Authorization` header and returns a `token`
        object.
      parameters:
        - name: authorization
          in: header
          description: base64 encoded string containing login and password
          type: string
        - name: x-forwarded-for
          in: header
          description: set externally to indicate real source of the request
          type: string
        - name: request
          in: body
          description: Lifespan of the token
          schema:
            $ref: '#/definitions/TokenRequest'
      x-parameters:
        - name: remote_addr
          in: environ
          description: source of the request
          type: string
        - name: remote_user
          in: environ
          description: set externally to indicate user identity in case of proxy auth
          type: string
      responses:
        '201':
          description: New token has been created
          schema:
            $ref: '#/definitions/Token'
          headers:
            x-api-url:
              type: string
          examples:
            application/json:
              user: st2admin
              token: '5e86421776f946e98faea36c29e5a7c7'
              expiry: '2016-05-28T12:39:28.650231Z'
              id: '574840001878c10d0b6e8fbf'
              metadata: {}
        '401':
          description: Invalid or missing credentials has been provided
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              faultstring: Invalid or missing credentials
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      security: []
  /auth/v1/tokens/validate:
    post:
      operationId: st2auth.controllers.v1.auth:token_validation_controller.post
      description: |
        Validates a token provided in the request body.
      parameters:
        - name: request
          in: body
          description: Token to validate
          schema:
            $ref: '#/definitions/TokenValidationRequest'
      responses:
        '200':
          description: Validation results
          schema:
            $ref: '#/definitions/TokenValidationResult'
          examples:
            application/json:
              valid: false
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /stream/v1/stream:
    get:
      operationId: st2stream.controllers.v1.stream:stream_controller.get_all
      description: |
        Event stream endpoint.
      responses:
        '200':
          description: EventSource compatible stream of events
          examples:
            application/json:
              ref: 'core.local'
              # and stuff
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


definitions:
  Action:
    x-api-model: st2common.models.api.action:ActionAPI
    type: object
    required:
      - name
      - runner_type
    properties:
      id:
        type: string
        description: The unique identifier for the action.
      ref:
        type: string
        description: |
          System computed user friendly reference for the action. Provided value will be overridden by computed value.
      uid:
        type: string
      name:
        type: string
        description: The name of the action.
      description:
        type: string
        description: The description of the action.
      enabled:
        type: boolean
        description: Enable or disable the action from invocation.
        default: True
      runner_type:
        type: string
        description: The type of runner that executes the action.
      entry_point:
        type: string
        description: The entry point for the action.
        default: ''
      pack:
        type: string
        description: The content pack this action belongs to.
      parameters:
        $ref: '#/definitions/ActionParametersSubSchema'
      tags:
        type: array
        description: User associated metadata assigned to this object.
        items:
          type: object
      notify:
        description: Notification settings for action.
        type: object
        properties:
          on-complete: {$ref: '#/definitions/NotificationPropertySubSchema'}
          on-failure: {$ref: '#/definitions/NotificationPropertySubSchema'}
          on-success: {$ref: '#/definitions/NotificationPropertySubSchema'}
        additionalProperties: False
    # additionalProperties: false
  ActionCreateRequest:
    x-api-model: st2common.models.api.action:ActionCreateAPI
    allOf:
      - type: object
        properties:
          pack:
            type: string
            description: The content pack this action belongs to.
            default: '{{ DEFAULT_PACK_NAME }}'
      - $ref: '#/definitions/Action'
      - $ref: '#/definitions/DataFilesSubSchema'
  ActionUpdateRequest:
    x-api-model: st2common.models.api.action:ActionUpdateAPI
    allOf:
      - $ref: '#/definitions/Action'
      - $ref: '#/definitions/DataFilesSubSchema'
  ActionParameters:
    type: object
    properties:
      parameters:
        $ref: '#/definitions/ActionParametersSubSchema'
  ActionAlias:
    x-api-model: st2common.models.api.action:ActionAliasAPI
    type: object
  ActionAliasRequest:
    type: object
    required:
        - name
        - ref
        - pack
        - action_ref
    properties:
      name:
        description: Alias name.
        type: string
      ref:
        description: Alias reference (pack + name).
        type: string
      pack:
        description: Pack to which this alias belongs.
        type: string
      action_ref:
        description: Reference of an action this alias belongs.
        type: string
      id:
        type: string
        description: The unique identifier for the action.
      uid:
        type: string
      enabled:
        type: boolean
        description: Enable or disable the action from invocation.
        default: True
  ActionAliasMatchRequest:
      type: object
      required:
        - command
      properties:
        command:
          description: Command string to try to match the aliases against.
          type: string
  ActionAliasMatch:
      type: object
      properties:
        name:
          description: Name of the Action alias
          type: string
        description:
          description: Description of the Action Alias
          type: string
  ActionAliasHelp:
    type: object
    properties:
      avaliable:
        description: Total number of matching help strings
        type: integer
      helpstrings:
        description: List of matched helpstrings
        type: array
        items:
          type: object
          properties:
            pack:
              type: string
            display:
              type: string
            description:
              description: Description of the Action Alias
              type: string
  AliasExecution:
    type: object
  Execution:
    title: ActionExecution
    description: Record of the execution of an action.
    type: object
    properties:
      id:
        type: string
      trigger:
        $ref: '#/definitions/Trigger'
      trigger_type:
        $ref: '#/definitions/TriggerType'
      trigger_instance:
        $ref: '#/definitions/TriggerInstance'
      rule:
        $ref: '#/definitions/Rule'
      action:
        $ref: '#/definitions/Action'
      runner:
        $ref: '#/definitions/RunnerType'
      liveaction:
        $ref: '#/definitions/LiveAction'
      status:
        description: The current status of the action execution.
        type: string
        enum: {{ LIVEACTION_STATUSES }}
      start_timestamp:
        description: The start time when the action is executed.
        type: string
        pattern: {{ ISO8601_UTC_REGEX }}
      end_timestamp:
        description: The timestamp when the action has finished.
        type: string
        pattern: {{ ISO8601_UTC_REGEX }}
      elapsed_seconds:
        description: Time duration in seconds taken for completion of this execution.
        type: number
#        required: False
      web_url:
        description: History URL for this execution if you want to view in UI.
        type: string
#        required: False
      parameters:
        description: Input parameters for the action.
        type: object
#        patternProperties:
#          ^\w+$:
#            anyOf:
#              - type: array
#              - type: boolean
#              - type: integer
#              - type: number
#              - type: object
#              - type: string
#        additionalProperties: False
      context:
        type: object
      result:
        type: object
#        anyOf:
#          - type: array
#          - type: boolean
#          - type: integer
#          - type: number
#          - type: object
#          - type: string
      parent:
        type: string
      children:
        type: array
        items:
          type: string
        uniqueItems: True
      log:
        description: Contains information about execution state transitions.
        type: array
        items:
          type: object
          properties:
            timestamp:
              type: string
              pattern: {{ ISO8601_UTC_REGEX }}
            status:
              type: string
              enum: {{ LIVEACTION_STATUSES }}
    required:
      - id
    additionalProperties: False
  ExecutionRequest:
    allOf:
      - $ref: '#/definitions/LiveAction'
      - type: object
        properties:
          user:
            type: string
            x-nullable: true
            description: User context under which action should run (admins only)
            default: ''
  ExecutionFilters:
    type: object
  KeyValuePair:
    type: object
  KeyValuePairRequest:
    type: object
    required:
      - name
      - value
    properties:
      name:
        description: Key Name.
        type: string
      value:
        description: Key's value.
        type: string
      secret:
        description: Encrypt value before saving the value.
        type: boolean
      scope:
        description: "Scope the item is under. Example: 'user'."
        type: string
      user:
        description: User for user scoped items (admin only).
        type: string
        x-nullable: true
  PacksList:
    type: object
    properties:
      author:
        description: Author of the pack.
        type: string
      description:
        description: Description of the pack.
        type: string
      name:
        description: Name of the pack.
        type: string
      ref:
        description: Reference of the pack.
        type: string
      version:
        description: Version of the pack.
        type: string
      # for pack show and search
      content:
        description: Content type in the pack.
        type: object
      keywords:
        description: Keywords associated with the pack.
        type: array
        items:
          type: string
      repo_url:
        description: "URL of the Pack's repo."
        type: string
  PackView:
    type: object
    properties:
      author:
        description: Author of the pack.
        type: string
      description:
        description: Description of the pack.
        type: string
      email:
        description: Email of the author.
        type: string
      keywords:
        description: Keywords associated with the pack.
        type: array
        items:
          type: string
      name:
        description: Name of the pack.
        type: string
      version:
        description: Version of the pack.
        type: string
  PacksInstall:
    type: object
    properties:
      packs:
        description: ref of the packs in Exchange, or a git repo URL.
        type: array
        items:
          type: string
      force:
        description: Force pack installation.
        type: boolean
        default: false
  PacksUninstall:
    type: object
    properties:
      ref_or_id:
        description: ref or id of the pack
        type: string
      packs:
        description: Name of the packs in Exchange, or a git repo URL.
        type: array
        items:
          type: string
  PacksRegister:
    type: object
    properties:
      packs:
        description: ref of the packs in Exchange, or a git repo URL.
        type: array
        items:
          type: string
      types:
        description: Types of content to register.
        type: array
        items:
          $ref: '#/definitions/PacksContentRegisterType'
  PacksContentRegisterType:
          type: string
          enum: ['all',
                  'runner',
                  'action',
                  'actions',
                  'trigger',
                  'triggers',
                  'sensor',
                  'sensors',
                  'rule',
                  'rules',
                  'rule_type',
                  'rule_types',
                  'alias',
                  'aliases',
                  'policy_type',
                  'policy_types',
                  'policy',
                  'policies',
                  'config',
                  'configs']
  PacksSearchShow:
    type: object
    properties:
      pack:
        description: Name of the pack to show.
        type: string
      query:
        description: Search query.
        type: string
  PackIndex:
    type: object
    properties:
      indexes:
        description: Index details.
        type: object
        items:
          type: object
          properties:
            count:
              description: Number of index.
              type: integer
            errors:
              description: Errors.
              type: object
            invalid:
              description: Invalid.
              type: integer
            status:
              description: Status of the index.
              type: array
            valid:
              description: Valid.
              type: integer
      packs:
        description: Number of packs in the index.
        type: object
  PackConfig:
    type: array
    items:
      type: object
  PackConfigView:
    type: object
  PackConfigContent:
    type: object
  PackConfigCreate:
    type: object
  PolicyTypeList:
    type: object
  PolicyList:
    type: object
  PolicyCreate:
    type: object
  RunnerType:
    type: object
  Rule:
    x-api-model: st2common.models.api.rule:RuleAPI
    type: object
  RuleType:
    type: object
  RuleEnforcementsList:
    type: object
  SensorType:
    type: object
  TimersList:
    type: object
  TracesList:
    type: object
  Trigger:
    type: object
  TriggerRequest:
    type: object
  TriggerType:
    type: object
  TriggerTypeRequest:
    type: object
  TriggerInstance:
    type: object
  ApiKey:
    type: object
  ApiKeyRequest:
    type: object
  LiveAction:
    title: liveaction
    description: An execution of an action.
    type: object
    properties:
      id:
        description: The unique identifier for the action execution.
        type: string
      status:
        description: The current status of the action execution.
        type: string
        enum: {{ LIVEACTION_STATUSES }}
      start_timestamp:
        description: The start time when the action is executed.
        type: string
        pattern: {{ ISO8601_UTC_REGEX }}
      end_timestamp:
        description: The timestamp when the action has finished.
        type: string
        pattern: {{ ISO8601_UTC_REGEX }}
      action:
        description: Reference to the action to be executed.
        type: string
      action_is_workflow:
        description: Flag indicating workflow action.
        type: boolean
      parameters:
        description: Input parameters for the action.
        type: object
        # patternProperties:
        #   ^\w+$:
        #     anyOf: [
        #       type: array
        #       type: boolean
        #       type: integer
        #       type: number
        #       type: object
        #       type: string
        #       type: null
        #     ]
        # 'additionalProperties': False
      result:
        type: object
        # anyOf: [type: array
        #      type: boolean
        #      type: integer
        #      type: number
        #      type: object
        #      type: string]
      context:
        type: object
      callback:
        type: object
      runner_info:
        type: object
      notify:
        description: Notification settings for liveaction.
        type: object
        properties:
          on-complete: {$ref: '#/definitions/NotificationPropertySubSchema'}
          on-failure: {$ref: '#/definitions/NotificationPropertySubSchema'}
          on-success: {$ref: '#/definitions/NotificationPropertySubSchema'}
        additionalProperties: False
    required:
      - action
  Webhook:
    type: object
  WebhookBody:
    description: Given support of Content-Type header, that could be anything.
  ActionParametersSubSchema:
    type: object
    description: Input parameters for the action.
    # patternProperties:
    #     ^\w+$:
    #       type: object  # util_schema.get_action_parameters_schema() is too complex for now
    # additionalProperties: False
    x-additional-check: st2api.controllers.resource:parameter_validation
    default: {}
  DataFilesSubSchema:
    type: object
    properties:
      data_files:
        description: Optional action script and data files which are written to the filesystem.
        type: array
        items:
          type: object
          required:
            - file_path
            - content
          properties:
            file_path:
              type: string
            content:
              type: string
          additionalProperties: False
        default: []
    # additionalProperties: false
  NotificationPropertySubSchema:
    type: object
    properties:
      message:
        type: string
        description: Message to use for notification
      data:
        type: object
        description: Data to be sent as part of notification
      routes:
        type: array
        description: Channels to post notifications to.
        items:
          type: string
      channels:  # Deprecated. Only here for backward compatibility.
        type: array
        description: Channels to post notifications to.
        items:
          type: string
    additionalProperties: false
  TokenRequest:
    type: object
    properties:
      ttl:
        type:
          - integer
          - 'null'
        minimum: 1
  Token:
    type: object
    properties:
      expiry:
        type: string
        format: datetime
      id:
        type: string
        format: uuid
      metadata:
        type: object
      token:
        type: string
      user:
        type: string
  TokenValidationRequest:
    type: object
    properties:
      token:
        type:
          - string
          - 'null'
  TokenValidationResult:
    type: object
    properties:
      valid:
        type: boolean
  ValidationError:
    type: object
    properties:
      type:
        type: string
      path:
        type: string
      message:
        type: string
  Error:
    type: object
    properties:
      faultstring:
        type: string

securityDefinitions:
  X-Auth-Token:
    description: Header representing user's short-lived access token.
    type: apiKey
    name: X-Auth-Token
    in: header
    x-operationId: st2common.util.auth:validate_token
  St2-Api-Key:
    description: Header representing service's long-lived API key.
    type: apiKey
    name: St2-Api-Key
    in: header
    x-operationId: st2common.util.auth:validate_api_key
  x-auth-token:
    description: Query parameter representing user's short-lived access token. Used as a backup authentication strategy for environments where it is impossible to provide a header.
    type: apiKey
    name: x-auth-token
    in: query
    x-operationId: st2common.util.auth:validate_token
  st2-api-key:
    description: Query parameter representing service's long-lived API key. Used as a backup authentication strategy for environments where it is impossible to provide a header.
    type: apiKey
    name: st2-api-key
    in: query
    x-operationId: st2common.util.auth:validate_api_key

security:
  - X-Auth-Token: []
  - St2-Api-Key: []
  - x-auth-token: []
  - st2-api-key: []
